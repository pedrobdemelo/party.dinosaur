<!DOCTYPE html>
<html>
<head><title>Canvas code example teste</title>

<style>
/*
 Gambiarra pra fazer o background funcionar. Ainda quero transferir
   isto para o proprio html, visto que tenho o codigo pronto.
*/
body {
    background-image: url("HtmlToSvg(4).svg");
    background-repeat: no-repeat;
}
</style>

<!-- JavaScript source code goes here-->
<!-- <script src="dados_func.js"></script> -->
<script src="dat.gui.min.js"></script>

<!--<canvas id="canvas" width="502" height="108"></canvas>-->
<!--<canvas id="canvas" width="1004" height="216" ></canvas>-->
<!-- <canvas id="canvas" width="1004" height="432" ></canvas> -->
<canvas id="canvas" width="960" height="400" ></canvas>
  <script type="text/javascript">
    var props = {
        message: 'Z-Scan curves',
        message2: 'z = sqrt(3)z_c',
        theta: 0.1,
        tau_c: 2.5,
//        type: 'Thermal lens',  
        z_z_c: Math.sqrt(3.0),
        optimize_z: function(){ props.z_z_c = Math.sqrt(3); draw();},
        freq: 5.0,
        chopper: 'ON'
    };

    var gui = new dat.GUI();

    gui.add(props, 'message').name('Plot of');;
    gui.add(props, 'message2').name('Position(z/z_c)');
    var control5 = gui.add(props, 'optimize_z').name('Set z to optimal');
    var control3 = gui.add(props, 'z_z_c').min(-5.0).max(5.0).step(0.1).listen().name('z/z_c');
    var control2 = gui.add(props, 'theta').min(-0.2).max(0.2).step(0.01).listen().name('Theta');
    var control4 = gui.add(props, 'tau_c').min(0.1).max(5.0).step(0.1).listen().name('Tau_c');
    var control6 = gui.add(props, 'freq').min(2.0).max(12.0).step(0.1).listen().name('f');
    var control7 = gui.add(props, 'chopper', [ 'ON', 'OFF' ]).name('Chopper: ');
//    var control1 = gui.add(props, 'type', [ 'Thermal lens', 'Sheik-Bahae' ] );

  </script>

  <script type="text/javascript" onChange="update();">

// Os controles necessitam estar neste script
   control2.onChange(draw);
   control3.onChange(draw);
   control4.onChange(draw);
   control5.onChange(draw);
   control6.onChange(draw);
   control7.onChange(draw);

// function fun1(x) {z_z_c = props.z_z_c; return Math.sin(z_z_c*x) + 0.2*x;  }
function fun2(x) {theta = props.theta; tau_c = props.tau_c; z_z_c = props.z_z_c; freq = props.freq;

//return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(x/tau_c))));}

if(x>0 && x<freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/x))));
else if(x>-2.0*freq && x<-freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/(x+2.0*freq)))));
else if(x>2.0*freq && x<3.0*freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/(x-2.0*freq)))));
else if(x>-4.0*freq && x<-3.0*freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/(x+4.0*freq)))));
else if(x>4.0*freq && x<5.0*freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/(x-4.0*freq)))));
else if(x>-6.0*freq && x<-5.0*freq)
return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2) + (9.0 + (z_z_c)**2)*(0.5*tau_c/(x+6.0*freq)))));

else
return -5.0;}

function fun3(x) {z_z_c = props.z_z_c; return 1.0-50.0*(0.5*theta*Math.atan(2.0*(z_z_c)/((3.0 + (z_z_c)**2))));; }

function draw() {
 var canvas = document.getElementById("canvas");
 if (null==canvas || !canvas.getContext) return;

 var axes={}, ctx=canvas.getContext("2d");
 ctx.clearRect(0, 0, canvas.width, canvas.height);
 axes.x0 = .5 + .5*canvas.width;  // x0 pixels from left to x=0
 axes.y0 = .5 + .5*canvas.height; // y0 pixels from top to y=0
 axes.scale = 40;                 // 40 pixels from x=0 to x=1
 axes.doNegativeX = true;

 showAxes(ctx,axes);
// funGraph(ctx,axes,fun1,"rgb(11,153,11)",1); 
chopper = props.chopper;
 if(chopper == 'ON')
   {
       funGraph(ctx,axes,fun2,"rgb(66,44,255)",2);
   } else
   {
       funGraph(ctx,axes,fun3,"rgb(66,44,255)",2);
   }
// funGraph(ctx,axes,fun3,"rgb(11,153,11)",2);
}

function funGraph (ctx,axes,func,color,thick) {
 var xx, yy, dx=0.1, x0=axes.x0, y0=axes.y0, scale=axes.scale;
 var iMax = Math.round((ctx.canvas.width-x0)/dx);
 var iMin = axes.doNegativeX ? Math.round(-x0/dx) : 0;
 ctx.beginPath();
 ctx.lineWidth = thick;
 ctx.strokeStyle = color;

 for (var i=iMin;i<=iMax;i++) {
  xx = dx*i; yy = scale*func(xx/scale);
  yy = yy + 30.0;
  if (i==iMin) ctx.moveTo(x0+xx,y0-yy);
  else         ctx.lineTo(x0+xx,y0-yy);
 }
 ctx.stroke();
}

function showAxes(ctx,axes) {
 var x0=axes.x0, w=ctx.canvas.width;
 var y0=axes.y0, h=ctx.canvas.height;
 var xmin = axes.doNegativeX ? 0 : x0;
 ctx.beginPath();
 ctx.lineWidth = 1;
 ctx.strokeStyle = "rgb(128,128,128)"; 
 ctx.moveTo(xmin,y0); ctx.lineTo(w,y0);  // X axis
 ctx.moveTo(x0,0);    ctx.lineTo(x0,h);  // Y axis
 ctx.stroke();
}
  </script>
</head>

<body onload="draw()" >
</body>

</html>
